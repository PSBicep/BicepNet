name: Build, Test and Release

on:
  push:
    branches: [master,main]
    tags: [v*]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Upgrade to latest preview of powershell
      shell: pwsh
      run: |
        Invoke-Expression "& { $(irm https://aka.ms/install-powershell.ps1) } -Quiet"
        '/home/runner/.powershell' >> $env:GITHUB_PATH

    - name: Set PSModulePath
      shell: pwsh
      run: |
        $PSModulePath = @(
          [System.IO.Path]::Combine($Env:GITHUB_WORKSPACE, 'TMP', 'Modules'),
          $Env:PSModulePath
        ) -join  [System.IO.Path]::PathSeparator
        "PSModulePath=$PSModulePath" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append

    - name: Setup.NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '7.0'

    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.14
      with:
        versionSpec: '5.x'

    - name: Determine Version
      id:   gitversion
      uses: gittools/actions/gitversion/execute@v0.9.14

    - name: Setup assets cache
      id: assetscache
      uses: actions/cache@v3
      with:
        path: |
          TMP/bicep
        key: ${{ hashFiles('scripts\Dependencies.ps1','.bicepVersion') }}

    - name: Download required assemblies
      if: steps.assetscache.outputs.cache-hit != 'true'
      shell: pwsh
      run: ./scripts/Dependencies.ps1

    - name: Build module
      shell: pwsh
      run: ./scripts/build.ps1 -Version "${{steps.gitversion.outputs.LegacySemVerPadded}}"

    - name: Publish build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: BicepNet.PS
        path: |
          out/
    
    - name: Publish release artifact
      if: startsWith(github.ref, 'refs/tags/v')
      uses: actions/upload-artifact@v3
      with:
        name: BicepNet.PS.zip
        path: BicepNet.PS.zip

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: BicepNet.PS
          path: out/

      - name: Set PSModulePath
        shell: pwsh
        run: |
          $PSModulePath = @(
            [System.IO.Path]::Combine($Env:GITHUB_WORKSPACE, 'TMP', 'Modules'),
            $Env:PSModulePath
          ) -join  [System.IO.Path]::PathSeparator
          "PSModulePath=$PSModulePath" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append

      - name: Setup test reqs cache
        id: testreqscache
        uses: actions/cache@v3
        with:
          path: |
            TMP/Modules
          key: ${{ hashFiles('scripts/testRequirements.ps1') }}

      - name: Download required assemblies
        if: steps.testreqscache.outputs.cache-hit != 'true'
        shell: pwsh
        run: ./scripts/testRequirements.ps1

      - name: Run tests
        shell: pwsh
        run: |
          Import-Module -Name 'Pester' -ErrorAction 'Stop'

          $CodePaths = [System.Collections.ArrayList]::new()
          # $CodePaths.AddRange((Get-ChildItem "$PSScriptRoot\..\*.ps1").FullName)

          $PesterConfiguration = [PesterConfiguration]::new()
          $PesterConfiguration.TestResult.Enabled      = $true
          $PesterConfiguration.TestResult.OutputFormat = 'JUnitXml'
          $PesterConfiguration.CodeCoverage.Enabled    = $false
          # $PesterConfiguration.CodeCoverage.Path       = $CodePaths.ToArray()

          Invoke-Pester -Configuration $PesterConfiguration

      - name: Publish test results
        uses: EnricoMi/publish-unit-test-result-action/composite@v2
        with:
          files: testResults.xml

  release:
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    needs: test
    steps:

    - name: Download artifact
      uses: actions/download-artifact@v3
      with:
        name: BicepNet.PS.zip

    - name: Publish assets
      uses: softprops/action-gh-release@v1
      with:
        files: BicepNet.PS.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
    - name: Publish module to PSGallery
      shell: pwsh
      run: |
        Expand-Archive -Path 'BicepNet.PS.zip'
        Publish-Module -Path "./BicepNet.PS/BicepNet.PS" -NuGetApiKey $Env:BICEPNET_PSGALLERY_KEY -Verbose
      env:
        BICEPNET_PSGALLERY_KEY: ${{ secrets.BICEPNET_PSGALLERY_KEY }}


